# For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

cmake_minimum_required(VERSION 3.22.1)

# Declares and names the project.
project("jnilib")

# Includes a rust library with headers generated by cbindgen
include(FetchContent)
FetchContent_Declare(
        Corrosion
        GIT_REPOSITORY https://github.com/corrosion-rs/corrosion.git
        GIT_TAG v0.4.1 # Optionally specify a commit hash, version tag or branch here
)
FetchContent_MakeAvailable(Corrosion)
# Import targets defined in a package or workspace manifest `Cargo.toml` file
corrosion_import_crate(MANIFEST_PATH ../../../../../rustlib/binding_ffi/Cargo.toml)
corrosion_experimental_cbindgen(
        TARGET binding_ffi
        HEADER_NAME "rustlib.h"
        FLAGS -c cbindgen-ffi.toml
)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.
add_library( # Sets the name of the library.
        jnilib
        # Sets the library as a shared library.
        SHARED
        # Provides a relative path to your source file(s).
        jnilib.cpp
        jni/found_primes_jni.cpp
        jni/FoundPrimesJni.cpp
        jni/GlobalRefContext.cpp
        jni/jni_helper.cpp
        jni/simple_sieve_jni.cpp
        jni/jni_helper.h
        )

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.
find_library( # Sets the name of the path variable.
        log-lib
        # Specifies the name of the NDK library that
        # you want CMake to locate.
        log)

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.
target_link_libraries( # Specifies the target library.
        jnilib
        # Links the target library to the rust library imported by corrosion
        binding_ffi
        # Links the target library to the log library
        # included in the NDK.
        ${log-lib})


# TODO: Cruft I think
#add_executable(your_cpp_bin main.cpp)
#target_link_libraries(your_cpp_bin PUBLIC rustlib)